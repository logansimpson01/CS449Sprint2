# sos_game.py


from tkinter import *
from tkinter import simpledialog

class SOSGameLogic:
    def __init__(self, board_size):
        self.board_size = board_size
        self.board = [['' for _ in range(board_size)] for _ in range(board_size)]
        self.current_player = "Blue"
        self.game_over = False
        self.blue_score = 0
        self.red_score = 0
        self.game_mode = "Simple"

    def place_letter(self, row, col, letter):
        if self.game_over or self.board[row][col] != '':
            return False

        self.board[row][col] = letter
        sos_formed = self.check_sos(row, col)
        
        if sos_formed:
            if self.current_player == "Blue":
                self.blue_score += 1
            else:
                self.red_score += 1

            if self.game_mode == "Simple":
                self.game_over = True
            elif self.is_board_full():
                self.game_over = True
        else:
            if self.is_board_full():
                self.game_over = True
            else:
                self.switch_player()

        return True

    def check_sos(self, row, col):
        directions = [(0, 1), (1, 0), (1, 1), (1, -1)]
        for dr, dc in directions:
            if self.check_sequence(row, col, dr, dc):
                return True
        return False

    def check_sequence(self, row, col, dr, dc):
        letter = self.board[row][col]
        if letter == 'S':
            if (0 <= row + 2*dr < self.board_size and 0 <= col + 2*dc < self.board_size and
                self.board[row+dr][col+dc] == 'O' and
                self.board[row+2*dr][col+2*dc] == 'S'):
                return True
        elif letter == 'O':
            if (0 <= row - dr < self.board_size and 0 <= row + dr < self.board_size and
                0 <= col - dc < self.board_size and 0 <= col + dc < self.board_size and
                self.board[row-dr][col-dc] == 'S' and
                self.board[row+dr][col+dc] == 'S'):
                return True
        return False

    def is_board_full(self):
        return all(self.board[i][j] != '' for i in range(self.board_size) for j in range(self.board_size))

    def switch_player(self):
        self.current_player = "Red" if self.current_player == "Blue" else "Blue"

    def reset_game(self):
        self.board = [['' for _ in range(self.board_size)] for _ in range(self.board_size)]
        self.current_player = "Blue"
        self.game_over = False
        self.blue_score = 0
        self.red_score = 0

class SOSGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("SOS Game")
        self.create_widgets()

    def create_widgets(self):
        self.board_size = simpledialog.askinteger("Board Size", "Enter board size (3-10):", minvalue=3, maxvalue=10)
        if not self.board_size:
            self.board_size = 8  # Default size if user cancels

        self.game_logic = SOSGameLogic(self.board_size)

        self.master.geometry(f"{100 + self.board_size * 50}x{150 + self.board_size * 50}")

        self.player_colors = {"Blue": "blue", "Red": "red"}
        self.game_mode = StringVar(value="Simple")

        self.create_title()
        self.create_board()
        self.create_info_panel()

    def create_title(self):
        title_label = Label(self.master, text="SOS", font=("Helvetica", 24, "bold"))
        title_label.grid(row=0, columnspan=self.board_size, pady=10)

    def create_board(self):
        self.buttons = []
        for row in range(self.board_size):
            button_row = []
            for col in range(self.board_size):
                btn = Button(self.master, text="", width=3, height=1, font=("Helvetica", 12))
                btn.config(command=lambda r=row, c=col: self.on_button_click(r, c))
                btn.grid(row=row+1, column=col, padx=2, pady=2)
                button_row.append(btn)
            self.buttons.append(button_row)

    def create_info_panel(self):
        info_frame = Frame(self.master)
        info_frame.grid(row=self.board_size+1, columnspan=self.board_size, pady=10)

        Label(info_frame, text="Blue Player", font=("Helvetica", 12), fg="blue").grid(row=0, column=0, padx=10)
        Label(info_frame, text="Red Player", font=("Helvetica", 12), fg="red").grid(row=0, column=3, padx=10)

        self.blue_choice = StringVar(value="S")
        self.red_choice = StringVar(value="S")

        Radiobutton(info_frame, text="S", variable=self.blue_choice, value="S", fg="blue").grid(row=1, column=0)
        Radiobutton(info_frame, text="O", variable=self.blue_choice, value="O", fg="blue").grid(row=2, column=0)
        Radiobutton(info_frame, text="S", variable=self.red_choice, value="S", fg="red").grid(row=1, column=3)
        Radiobutton(info_frame, text="O", variable=self.red_choice, value="O", fg="red").grid(row=2, column=3)

        self.turn_label = Label(info_frame, text="Blue's turn", font=("Helvetica", 12), fg="blue")
        self.turn_label.grid(row=1, column=1, columnspan=2)

        self.message_label = Label(info_frame, text="", font=("Helvetica", 12))
        self.message_label.grid(row=2, column=1, columnspan=2)

        self.score_label = Label(info_frame, text="Blue: 0 | Red: 0", font=("Helvetica", 12))
        self.score_label.grid(row=3, column=1, columnspan=2)

        Radiobutton(info_frame, text="Simple", variable=self.game_mode, value="Simple", command=self.update_game_mode).grid(row=4, column=0, columnspan=2)
        Radiobutton(info_frame, text="General", variable=self.game_mode, value="General", command=self.update_game_mode).grid(row=4, column=2, columnspan=2)

        Button(info_frame, text="New Game", command=self.reset_game).grid(row=5, column=1, columnspan=2, pady=10)

    def on_button_click(self, row, col):
        if self.game_logic.game_over:
            return

        current_player = self.game_logic.current_player
        letter = self.blue_choice.get() if current_player == "Blue" else self.red_choice.get()
        color = self.player_colors[current_player]

        if self.game_logic.place_letter(row, col, letter):
            self.buttons[row][col]['text'] = letter
            self.buttons[row][col]['fg'] = color
            self.update_ui()

    def update_ui(self):
        self.score_label['text'] = f"Blue: {self.game_logic.blue_score} | Red: {self.game_logic.red_score}"
        if self.game_logic.game_over:
            if self.game_logic.blue_score > self.game_logic.red_score:
                self.message_label['text'] = "Blue wins!"
                self.message_label['fg'] = "blue"
            elif self.game_logic.red_score > self.game_logic.blue_score:
                self.message_label['text'] = "Red wins!"
                self.message_label['fg'] = "red"
            else:
                self.message_label['text'] = "It's a draw!"
                self.message_label['fg'] = "black"
        else:
            self.turn_label['text'] = f"{self.game_logic.current_player}'s turn"
            self.turn_label['fg'] = self.player_colors[self.game_logic.current_player]

    def update_game_mode(self):
        self.game_logic.game_mode = self.game_mode.get()

    def reset_game(self):
        self.game_logic.reset_game()
        for row in self.buttons:
            for button in row:
                button['text'] = ""
                button['fg'] = "black"
        self.turn_label['text'] = "Blue's turn"
        self.turn_label['fg'] = "blue"
        self.message_label['text'] = ""
        self.score_label['text'] = "Blue: 0 | Red: 0"

if __name__ == "__main__":
    root = Tk()
    gui = SOSGUI(root)
    root.mainloop()
